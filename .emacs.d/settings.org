#+TITLE: Emacs Configuration File

This file is a literate-programming based configuration file for Emacs. It
can be parsed with =org-babel-load-file= to extract the configuration from
the prose and get a working emacs configuration.

* Core Configuration

  First and foremost, configure =package.el= and the package repositories.

  #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

    (package-initialize)
  #+END_SRC

  It also helps when going from a clean install to automatically install all
  required packages to go from a fresh setup to a fully configured one without
  user interaction:

  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

    (eval-when-compile
    (require 'use-package))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
     (use-package linum-relative :ensure t)
     (use-package helm           :ensure t)
  #+End_SRC

** Helm - Fuzzy Matching/Narrowing

   #+BEGIN_SRC emacs-lisp
   (require 'helm-config)
   (helm-mode 1)
   #+END_SRC

** Auxiliary files

   By default, emacs drops two backup files (=#file#= and =file~=)
   next to every saved file. I don't like this approach as it leaves a
   bunch of files lying around. I much prefer a centralized backup
   directory:

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/bak")))
   #+END_SRC

   Prevent =customize.el= stuff from getting into =init.el=.
   #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
   #+END_SRC

* Look and Feel

  Disable the emacs splash screen, toolbar and menu bar for maximum
  minimalism.

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
  #+END_SRC

  =dracula= looks very slick.

  #+BEGIN_SRC emacs-lisp
    (require 'dracula-theme)
  #+END_SRC

  Use relative line numbering to faciliate vim motions.

  #+BEGIN_SRC emacs-lisp
    (linum-relative-global-mode)
  #+END_SRC

  Configure default indentation:
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil) ;; Use spaces
    (setq-default tab-width 4)
    ; C-specific stuff (move to its own section?)
    (defvaralias 'c-basic-offset 'tab-width)
    (defvaralias 'cperl-indent-level 'tab-width)
  #+END_SRC

* Languages

** Elisp
   Seeing as this is the main language of Emacs, it's a good idea to
   configure it to some sane defaults.

   #+BEGIN_SRC emacs-lisp

   #+END_SRC

** Rust
   This section configures the rust language.
   #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
        :ensure t
        :config (progn
            (setq rust-format-on-save t))
    )
   #+END_SRC
** Python

   #+BEGIN_SRC emacs-lisp
    (use-package python-mode
        :ensure t)
   #+END_SRC

* Keybindings

  Evil mode must be required last to ensure that it properly
  overrides keybindings. All keybindings are thus defined after it
  has been included.

  #+BEGIN_SRC emacs-lisp
    (setq evil-want-C-u-scroll t) ; Use vim's C-u
    (global-evil-leader-mode)
    (use-package evil            :ensure t)
    (use-package evil-leader     :ensure t)
    (use-package evil-commentary :ensure t)
    (use-package evil-surround   :ensure t
      :config
      (global-evil-surround-mode 1)
    (evil-mode t)
    (evil-commentary-mode t)
  #+END_SRC

** Magit

   This is largely a work in progress as I figure out which magit
   bindings I am comfortable with.

   #+BEGIN_SRC emacs-lisp
         (use-package magit
             :ensure magit
             :config
             (progn
                 (evil-leader/set-key "g" 'magit-status)

                 (evil-set-initial-state 'magit-mode 'normal)
                 (evil-set-initial-state 'magit-status-mode 'normal)
                 (evil-set-initial-state 'magit-diff-mode 'normal)
                 (evil-set-initial-state 'magit-log-mode 'normal)
                 (evil-define-key  'normal magit-mode-map
                     "?"           'magit-dispatch
                     "h"           'magit-section-hide
                     "l"           'magit-section-show
                     "j"           'magit-next-line
                     "k"           'magit-previous-line
                     "c"           'magit-commit
                     "q"           'magit-mode-bury-buffer)
                 (evil-define-key  'normal magit-log-mode-map
                     "?"           'magit-dispatch
                     "j"           'magit-next-line
                     "k"           'magit-previous-line
                     "q"           'magit-mode-bury-buffer)
                 (evil-define-key  'normal magit-diff-mode-map
                     "?"           'magit-dispatch
                     "h"           'magit-section-hide
                     "l"           'magit-section-show
                     "j"           'magit-next-line
                     "k"           'magit-previous-line
                     "q"           'magit-mode-bury-buffer)
         )))
   #+END_SRC
** Dired
   Rebind some keys to make =dired= easier to use with evil.

   #+BEGIN_SRC emacs-lisp
    ;; Same shortcut as vim's NERDTree for now...
    (define-key evil-normal-state-map (kbd "C-b") 'dired)

    (evil-define-key 'normal dired-mode-map "h" 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map "l" 'dired-find-file)
    (evil-define-key 'normal dired-mode-map "o" 'dired-sort-toggle-or-edit)
    (evil-define-key 'normal dired-mode-map "v" 'dired-toggle-marks)
    (evil-define-key 'normal dired-mode-map "m" 'dired-mark)
    (evil-define-key 'normal dired-mode-map "u" 'dired-unmark)
    (evil-define-key 'normal dired-mode-map "U" 'dired-unmark-all-marks)
    (evil-define-key 'normal dired-mode-map "c" 'dired-create-directory)
    (evil-define-key 'normal dired-mode-map "n" 'evil-search-next)
    (evil-define-key 'normal dired-mode-map "N" 'evil-search-previous)
    (evil-define-key 'normal dired-mode-map "q" 'kill-this-buffer)
   #+END_SRC
** Info
   The default bindings are actually decent, but require switching to
   =emacs-state=, which is an additional keystroke.
   
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'motion 'info-mode-map
       (kbd "C-o") 'Info-history-back
       (kbd "C-i") 'Info-history-forward)
   #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
    (evil-define-key  'normal org-mode-map
        "gl" 'org-demote-subtree
        "gh" 'org-promote-subtree
        (kbd "RET") 'org-open-at-point)
        
    (setq org-return-follows-link t)
    (setq org-hide-leading-stars t)
   #+END_SRC
*** Helm

    Open files and buffers with =;=.

    #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd ";") 'helm-mini)
     (evil-define-key 'normal info-mode-map ";" 'helm-mini)
    #+END_SRC

    =Ctrl+P= is a very common "go to anything..." shortcut in modern
    editors. Let's have the same. There are a few additional
    considerations for cross-platform support here: The tool =fd= is
    not always available. This still needs some work.

    #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd "C-p") 'helm-for-files)
    #+END_SRC

*** Navigation

    =Ctrl-S= is almost universal for save file...

    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-s") 'save-buffer)
    #+END_SRC

    Bind =M-x= to the helm variant

    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-x") 'helm-M-x)
    #+END_SRC

    Bind a =<leader>=-key similar to vim:

    #+BEGIN_SRC emacs-lisp
     (evil-leader/set-leader "<SPC>")
    #+END_SRC

    Define basic window navigation hotkeys:

    #+BEGIN_SRC emacs-lisp
      (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)

      ; Motion mode shouldd behave like normal mode.
      ; FIXME: Does not work?
      (define-key evil-motion-state-map (kbd "M-h") 'evil-window-left)
      (define-key evil-motion-state-map (kbd "M-j") 'evil-window-down)
      (define-key evil-motion-state-map (kbd "M-k") 'evil-window-up)
      (define-key evil-motion-state-map (kbd "M-l") 'evil-window-right)

      (evil-leader/set-key "q" 'kill-buffer-and-window)
      (evil-leader/set-key "e" 'pp-eval-last-sexp)

      ; Org globals (<leader>-o)
      (evil-leader/set-key "oa" 'org-agenda)
      (evil-leader/set-key "oo" 'org-capture)
      (evil-leader/set-key "ol" 'org-store-link)
      (evil-leader/set-key "ob" 'org-switchb)
    #+END_SRC
