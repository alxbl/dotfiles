#+TITLE: Emacs Configuration
#+PROPERTY: header-args :results output silent

Most of this should be self-explanatory. In places where it isn't,
additional explanations are provided.

(PS: I can't lisp.)

* Base
** Core

   The settings configured here are applied globally and configure the
   baseline functionality that I want.

   #+BEGIN_SRC emacs-lisp
     (setq evil-want-C-u-scroll t) ; Use vim's C-u

     ;; Base location of my journal. It's called WIKI
     ;; because I used to use VimWiki and was too lazy to rename it.
     (setq alxbl-wiki (getenv "WIKI"))

     ;; No clutter.
     (setq create-lockfiles nil)
     (setq make-backup-files nil)
     (setq auto-save-default nil)
     ;; This is important: It prevents emacs-custom from messing with my config.
     (setq custom-file (make-temp-file "emacs-custom"))

     ;; Boost the font size
     (set-frame-font "Noto Sans Mono 12" nil t)
   #+END_SRC

   Next, I want to use =use-package= to manage my configuration cleanly.
   To do that I need a bit of bootstrap code that will configure
   package repositories and install the module on the first run.

   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (setq load-prefer-newer t
             package-user-dir "~/.emacs.d/elpa"
             package--init-file-ensured t
             package-enable-at-startup nil)

       ;; Create package directory.
       (unless (file-directory-p package-user-dir)
         (make-directory package-user-dir t)))

     (eval-and-compile
       (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))

     (eval-when-compile
       (require 'package)
       ;; (package-initialize)
       (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/") t)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"   ) t)
       (add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/"      ) t)

       ;; Install use-package and core packages on first run.
       (unless (package-installed-p 'use-package)
         (package-refresh-contents)
         (package-install 'use-package)
         (package-install 'diminish))

       (setq use-package-always-ensure t)
       (setq use-package-expand-minimally t)

       (require 'use-package))

     ;; Start the Emacs server.
     (use-package server
       :hook (after-init . server-mode))
   #+END_SRC

    The last part additionally starts =emacs-server= so that emacs keeps
    running in the background. I use =emacsclient -c= to spawn a new frame.
    This also makes it possible to use emacs from the command line in
    degraded mode for quick edits.

** Editor
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-message t)
     (setq inhibit-startup-echo-area-message t)
     (setq initial-scratch-message nil)
     (setq-default indent-tabs-mode nil)

     ;; The year is 20XX, Prevent lisp from complaining about two spaces
     ;; after a period.
     (setq-default sentence-end-double-space nil)

     ;; No clutter.
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode 0)

     ;; Disable mouse use in most cases.
     ;; (use-package disable-mouse
     ;;   :diminish 'disable-mouse-global-mode
     ;;   :after evil
     ;;   :config
     ;;   (global-disable-mouse-mode)
     ;;   (mapc #'disable-mouse-in-keymap
     ;; 	(list evil-motion-state-map
     ;; 	      evil-normal-state-map
     ;; 	      evil-visual-state-map
     ;; 	      evil-insert-state-map)))

     ;; UTF-8 all the things.
     (prefer-coding-system 'utf-8-unix)
     (set-locale-environment "en_US.UTF-8")
     (set-default-coding-systems 'utf-8-unix)
     (set-selection-coding-system 'utf-8-unix)
     (set-buffer-file-coding-system 'utf-8-unix)
     (set-clipboard-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (setq buffer-file-coding-system 'utf-8)
     (setq save-buffer-coding-system 'utf-8-unix)

     ;; Vertical Column. 70 is too narrow for modern monitors...
     (set-fill-column 120)

     ;; Adjust font-size with hotkeys
     (global-set-key (kbd "C-+") 'text-scale-increase)
     (global-set-key (kbd "C--") 'text-scale-decrease)

     (global-set-key (kbd "C-s") 'save-buffer)

     ;; Tidy up pop-up windows.
     (use-package popwin
       :config
       (push '("^*helm.*" :regexp t) popwin:special-display-config)
       (push '("*Python-Help*") popwin:special-display-config)
       (push '("*Cargo Build*") popwin:special-display-config)
       :hook (after-init . popwin-mode))

     ;; Display line numbers for code buffers.
     (use-package display-line-numbers
     :hook ((prog-mode rust-mode python-mode) . display-line-numbers-mode)
     :custom
     (display-line-numbers-type 'relative)
     (display-line-numbers-current-absolute t)
     (display-line-numbers-width 4)
     (display-line-numbers-widen t))

   #+END_SRC

   Eldoc has been causing some trouble when using Python by popping up
   a pesky =*Python-Help*== buffer that destroys buffer layout and
   steals focus. I'm not exactly sure why this is happening, but I
   use LSP anyway so I don't need eldoc.

   #+BEGIN_SRC emacs-lisp
     (global-eldoc-mode -1)
   #+END_SRC

** Evil Mode

   The best of vim's modal editing in Emacs.

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :config
        (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
        (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
        (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
        (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)
        (define-key evil-normal-state-map (kbd "z0") 'hs-hide-level)

        ; Motion mode shouldd behave like normal mode.
        (define-key evil-motion-state-map (kbd "M-h") 'evil-window-left)
        (define-key evil-motion-state-map (kbd "M-j") 'evil-window-down)
        (define-key evil-motion-state-map (kbd "M-k") 'evil-window-up)
        (define-key evil-motion-state-map (kbd "M-l") 'evil-window-right))

    (use-package evil-leader :after evil
      :config
        (global-evil-leader-mode)
        (evil-leader/set-leader "<SPC>")
        (evil-leader/set-key "q" 'kill-buffer-and-window)
        (evil-leader/set-key "e" 'pp-eval-last-sexp)
        (evil-leader/set-key "s" 'sh-show-shell))

    (use-package evil-commentary :after evil :diminish)

    (use-package evil-surround :after evil
      :preface
        (defun alxbl/kill-all-buffers ()
        (interactive)
        (mapcar 'kill-buffer (buffer-list))
        (delete-other-windows))
      :config
        (evil-mode t)
        (evil-commentary-mode t)
        (global-evil-surround-mode t)

        (evil-leader/set-key "Q" 'alxbl/kill-all-buffers))
  #+END_SRC
* IDE
** Appearance
   #+BEGIN_SRC emacs-lisp
          (use-package doom-themes
            :custom
            (doom-themes-enable-italic t)
            (doom-themes-enable-bold t)
            :custom-face
            ;; (vertical-bar   (doom-darken base5 0.4))
            ;; (doom-darken bg 0.4)
            :config
            (load-theme 'doom-one t)
            (doom-themes-org-config)
            ;; Modeline
            (use-package all-the-icons)
            (use-package doom-modeline
              :custom
              (doom-modeline-buffer-file-name-style 'truncate-with-project)
              (doom-modeline-icon t)
              (doom-modeline-major-mode-icon nil)
              (doom-modeline-minor-modes nil)
              :hook
              (after-init . doom-modeline-mode)
              :config
              (set-cursor-color "cyan")
              (line-number-mode 0)
              (column-number-mode 0)

              (custom-set-variables
               '(custom-safe-themes
                 (quote
                  ("2d1fe7c9007a5b76cea4395b0fc664d0c1cfd34bb4f1860300347cdad67fb2f9"
                   "728eda145ad16686d4bbb8e50d540563573592013b10c3e2defc493f390f7d83" default)))))
          )

          ;; Make parentheses easier to navigate.
          (use-package rainbow-delimiters
            :hook
            (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

** Project Management

   Setup source control and git integration with =magit=.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :config
       (progn
         (evil-leader/set-key "g" 'magit-status)

         (evil-set-initial-state 'magit-mode 'normal)
         (evil-set-initial-state 'magit-status-mode 'normal)
         (evil-set-initial-state 'magit-diff-mode 'normal)
         (evil-set-initial-state 'magit-log-mode 'normal)
         (evil-define-key  'normal magit-mode-map
           "?"           'magit-dispatch
           "h"           'magit-section-hide
           "l"           'magit-section-show
           "j"           'magit-next-line
           "k"           'magit-previous-line
           "c"           'magit-commit
           "q"           'magit-mode-bury-buffer)
         (evil-define-key  'normal magit-log-mode-map
           "?"           'magit-dispatch
           "j"           'magit-next-line
           "k"           'magit-previous-line
           "q"           'magit-mode-bury-buffer)
         (evil-define-key  'normal magit-diff-mode-map
           "?"           'magit-dispatch
           "h"           'magit-section-hide
           "l"           'magit-section-show
           "j"           'magit-next-line
           "k"           'magit-previous-line
           "q"           'magit-mode-bury-buffer)
         ))
   #+END_SRC

   Use =projectile= and =treemacs= to make it easier to track/navigate
   individual projects and workspaces.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile :diminish)
     (use-package treemacs
       :after evil
       :config
       (define-key evil-normal-state-map (kbd "C-b") 'treemacs)
       (define-key evil-motion-state-map (kbd "C-b") 'treemacs))

     ;; Integration packages.
     (use-package treemacs-projectile :after treemacs projectile)
     (use-package treemacs-evil :after treemacs evil)
   #+END_SRC

   Sometimes, I still use dired to navigate the file system, so give
   it some =vim=-like bindings.

   #+BEGIN_SRC emacs-lisp
   (use-package dired :ensure nil
     :after evil
     :config
    (evil-define-key 'normal dired-mode-map "h" 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map "l" 'dired-find-file)
    (evil-define-key 'normal dired-mode-map "o" 'dired-sort-toggle-or-edit)
    (evil-define-key 'normal dired-mode-map "v" 'dired-toggle-marks)
    (evil-define-key 'normal dired-mode-map "m" 'dired-mark)
    (evil-define-key 'normal dired-mode-map "u" 'dired-unmark)
    (evil-define-key 'normal dired-mode-map "U" 'dired-unmark-all-marks)
    (evil-define-key 'normal dired-mode-map "c" 'dired-create-directory)
    (evil-define-key 'normal dired-mode-map "n" 'evil-search-next)
    (evil-define-key 'normal dired-mode-map "N" 'evil-search-previous)
    (evil-define-key 'normal dired-mode-map "q" 'kill-this-buffer))
   #+END_SRC

** Auto-Completion & Language Services
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet :diminish yas-minor-mode
       :hook (after-init . yas-global-mode))

     (use-package company :diminish
       :bind
       (:map company-active-map
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous)
             ("<tab>" . company-complete-common-or-cycle)
             :map company-search-map
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous))
       :custom
       (company-idle-delay 0)
       (company-echo-delay 0)
       (company-minimum-prefix-length 1)
       :hook
       ((rust-mode
         python-mode
         go-mode
         c++-mode
         c-mode
         objc-mode) . (lambda () (set (make-local-variable 'company-backends)
                                 '((company-yasnippet
                                    company-lsp
                                    company-files
                                    ;; company-dabbrev-code
                                    )))))
       (after-init . global-company-mode))

     (use-package lsp-mode
       :custom
       (lsp-print-io nil)
       (lsp-trace nil)
       (lsp-print-performance nil)
       (lsp-auto-guess-root t)
       (lsp-prefer-flymake nil)
       (lsp-document-sync-method 'incremental)
       (lsp-response-timeout 10)
       :config
       (require 'lsp-clients)
       :hook
       ((rust-mode python-mode c++-mode) . lsp)
       :bind
       (:map lsp-mode-map
             ("<f2>" . lsp-rename)
             ;; ("C-<period>" .  lsp-execute-code-action)
             ("C-c C-f" . lsp-format-buffer)
             ))

     (use-package lsp-ui
       :commands lsp-ui-mode
       :hook
       (lsp-mode . lsp-ui-mode))

     (use-package company-lsp :after company
       :custom
       (company-lsp-cache-candidates t)
       (company-lsp-async t)
       (company-lsp-enable-snippet t)
       (company-lsp-enable-recompletion t))

     (use-package lsp-treemacs)

     (use-package flycheck :diminish
       :init (global-flycheck-mode)
       :hook ((rust-mode python-mode) . flycheck-mode)
       :config
       (define-key evil-normal-state-map (kbd "zn") 'flycheck-next-error)
       (define-key evil-normal-state-map (kbd "zp") 'flycheck-previous-error))

     (use-package helm :diminish 'helm-mode
       :after evil
       :demand t
       :config
       (define-key evil-normal-state-map (kbd ";") 'helm-mini)
       (evil-define-key 'normal info-mode-map ";" 'helm-mini)
       (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)
       (diminish 'helm-mode)
       (global-set-key (kbd "M-x") 'helm-M-x)
       :hook (after-init . helm-mode))

     ;; (use-package helm-rg :after helm
     ;;   :config
     ;;   (evil-leader/set-key "f" 'helm-projectile-rg))

     ;; (use-package helm-projectile :ensure t :after helm)
   #+END_SRC
** Programming Language Support
   This section configures various language-specific modules.

*** Rust
    Adds basic language support, Cargo Keybinds, TOML syntax highlighting
    and flycheck support.
    # FIXME: is flycheck-rust required with lsp-mode?
    # FIXME: What about clippy?

    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode :mode "\\.rs\\'"
	:hook (rust-mode . hs-minor-mode)
	:custom
	(rust-format-on-save t))

      (use-package cargo
	:after rust-mode
	:hook (rust-mode . cargo-minor-mode))

      (use-package toml-mode :mode "\\.toml\\'")

      (use-package flycheck-rust
	:hook (flycheck-mode . flycheck-rust-setup))
    #+END_SRC

*** Python
    This is a very flakey work in progress for Python... It looks like
    lsp-mode, flycheck, and eldoc are clashing wildly and causing me a
    lot of pain. The package =pipenv= is very useful for making Emacs use
    LSP and whatnot from the virtual environment.

   #+BEGIN_SRC emacs-lisp
     ;; (use-package python :mode ("\\.py\\'" . python-mode)
     ;;   :interpreter ("python" . python-mode))

     (use-package pipenv
       :hook (python-mode . pipenv-mode)
       :init
       (setq
        pipenv-projectile-after-switch-function
        #'pipenv-projectile-after-switch-extended))
   #+END_SRC

*** Powershell / C#
    #+BEGIN_SRC emacs-lisp
    (use-package powershell :mode "\\.(ps1|psm1|psd1)\\'")
    (use-package csharp-mode :mode "\\.(cs)\\'")
    #+END_SRC

*** Web
    Web development packages.

    #+BEGIN_SRC emacs-lisp
      (use-package php-mode :mode "\\.(php)\\'")

      ;; Display color swatches
      (use-package rainbow-mode
        :hook ((html-mode css-mode) . rainbow-mode))

      ;; Javascript
      (use-package js :mode "\\.(js)\\'"
       :custom
       (js-indent-level 4))

      ;; TypeScript
      (use-package tide :mode "\\.(ts)\\'")
    #+END_SRC

*** C
    #+BEGIN_SRC emacs-lisp
      (use-package cc-mode
      :hook (c-mode-common . (lambda ()
              ;; (setq indent-line-function 'insert-tab)
              (setq tab-width 4)
              (c-set-style "bsd")
              (setq c-basic-offset 4)
              (c-set-offset 'comment-intro 0)
      )))
    #+END_SRC

*** Miscelleneous
    This section contains packages for various languages that are not
    commonly used but for which it is nice to have syntax highlight.

    Most of these languages are markup or general purpose.

    #+BEGIN_SRC emacs-lisp
      ;; YAML
      (use-package yaml-mode :mode "\\.(yaml|yml)\\'")

      ;; AsciiDoc
      (use-package adoc-mode :mode "\\.(adoc)\\'")

      ;; Lua
      (use-package lua-mode :mode "\\.lua\\'")

      ;; Markdown (TOC Generation)
      (use-package markdown-toc :after markdown-mode)

      ;; CMake
      (use-package cmake-mode :mode "CMakeLists\\.txt\\'")

      ;; Ledger files
      (use-package ledger-mode :mode "\\.ledger\\'")

    #+END_SRC
* Org Mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
        :after evil
        :custom
          (org-agenda-files "~/.emacs.d/agenda")
          (org-todo-keywords '((sequence "IDEA(i)" "TODO(t)" "WIP(w!)" "BLOCKED(b!)" "|" "READY(r!)" "DONE(d!)" "DROPPED(x!)")))
          (org-return-follows-link t)
          (org-hide-leading-stars t)
          (org-pretty-entities t)
          (org-hide-emphasis-markers t)
          (org-todo-keyword-faces
           '(("IDEA" . "cyan")
             ("TODO" . "orange")
             ("WIP" . "yellow")
             ("BLOCKED" . "red")
             ("DROPPED" . "gray")
             ("READY" . "green")))
          (org-capture-templates
           `(("t" "Add todo item" entry (file+headline tasks-file "Inbox")
               "* TODO %?\n   - Added on [%(alxbl/get-date)]\n %i\n" :kill-buffer t)
             ("p" "Add Personal note" item (file+olp+datetree diary-file "Diary") " - %? " :tree-type week :kill-buffer t)
             ("i" "Remember an idea" item (file+headline diary-file "Ideas") " - %?" :tree-type week :kill-buffer t)
             ("r" "Perform Daily Review" entry (file+olp+datetree diary-file "Diary")
               (file "~/.emacs.d/templates/daily.org") :immediate-finish t :tree-type week :kill-buffer t :jump-to-captured t)
             ("R" "Perform Monthly Review" entry (file+olp+datetree diary-file "Diary")
               (file "~/.emacs.d/templates/monthly.org") :immediate-finish t :tree-type week :kill-buffer t :jump-to-captured t)
             ("w" "Start work day" entry (file+olp+datetree work-file  "Diary")
               (file ,work-tmpl) :tree-type week :kill-buffer t :jump-to-captured t :immediate-finish t)
             ))
        :config
          (setq tasks-file (concat alxbl-wiki "/log/tasks.org"))
          (setq diary-file (concat alxbl-wiki "/log/personal.org"))
          (setq work-file (concat alxbl-wiki "/log/work.org"))
          (setq wiki-file (concat alxbl-wiki "/wiki.org"))
          (setq work-tmpl (concat alxbl-wiki "/meta/templates/workday.org"))
          (setq config-file (concat user-emacs-directory "/settings.org"))
           ;; LaTeX export settings
           (add-to-list 'org-latex-packages-alist '("" "listingsutf8"))
           (add-to-list 'org-latex-packages-alist '("" "minted"))
           (setq org-latex-listings 'minted)
           (setq org-latex-pdf-process
                   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

           (setq org-src-fontify-natively t)

           (org-babel-do-load-languages
               'org-babel-load-languages
               '((python . t)
               (latex . t)))
           ;; --

          (evil-define-key  'normal org-mode-map
              ;; Navigation
              "gl" 'org-demote-subtree
              "gh" 'org-promote-subtree
              "L" 'org-next-visible-heading
              "H" 'org-previous-visible-heading
              ;; <leader>t: Task Management
              "T" 'org-todo
              "ts" 'org-schedule
              "tci" 'org-clock-in
              "tco" 'org-clock-out
              "tcg" 'org-clock-goto
              "tcv" 'org-toggle-time-stamp-overlays
              (kbd "RET") 'org-open-at-point)

           ;; <leader>o: Organization
           (evil-leader/set-key "ow" (lambda () (interactive) (find-file wiki-file)))
           (evil-leader/set-key "oc" (lambda () (interactive) (find-file config-file)))

           (evil-leader/set-key "oa" 'org-agenda)
           (evil-leader/set-key "or" 'org-refile)
           (evil-leader/set-key "oo" 'org-capture)
           (evil-leader/set-key "oO" 'org-capture-goto-target)
           (evil-leader/set-key "ol" 'org-store-link)
           (evil-leader/set-key "ob" 'org-switchb)
           (evil-leader/set-key "of" 'org-footnote-action)
           (evil-leader/set-key "on" 'org-narrow-to-subtree)
           (evil-leader/set-key "oN" 'widen)

           (evil-leader/set-key "p" 'org-capture-screenshot)

           (evil-leader/set-key "SPC" 'evil-toggle-fold)
           ;; This breaks delete/yank line motions.
           ;; "dab" 'org-cut-subtree
           ;; "yab" 'org-copy-subtree
           ;; (evil-define-key 'visual org-mode-map
           ;;   "d" 'delete-region)
        :hook
          (kill-emacs . ladicle/org-clock-out-and-save-when-exit)
          (org-mode . auto-fill-mode)
        :preface
           (defun alxbl/get-date ()
             "Return the current time as a formatted string"
             (format-time-string "%Y-%m-%d %H:%M" (current-time)))

           ;; https://emacs.stackexchange.com/questions/50253/how-to-jump-to-a-heading-in-a-date-tree
           (defun datetree-jump ()
             "Jumps to the datetree heading that matches the current date."
             (interactive)
             (let ((point (point)))
               (catch 'found
                 (goto-char (point-min))
                 (while (outline-next-heading)
                   (let* ((hl (org-element-at-point))
                          (title (org-element-property :raw-value hl)))
                     (when (string= title (format-time-string "%F %A"))
                       (org-show-context)
                       (setq point (point))
                       (throw 'found t)))))
               (goto-char point)))

          ;; https://ladicle.com/post/config/#org
          (defun ladicle/org-clock-out-and-save-when-exit ()
              "Save buffers and stop clocking when kill emacs."
                (ignore-errors (org-clock-out) t)
                (save-some-buffers t))
          (defun org-capture-screenshot (&optional caption)
            (interactive "P")
            (let* ((image-dir
                    (if (not (buffer-file-name))
                        (let ((buffer-name (replace-regexp-in-string "CAPTURE-[0-9-]*" "" (buffer-name))))
                          (concat (file-name-directory (buffer-file-name (get-file-buffer buffer-name))) "screens"))
                      "screens")))
              (unless (file-exists-p image-dir)
                (make-directory image-dir))
              (let* ((image-file (concat image-dir "/" (format-time-string "%Y%m%d_%H%M%S") ".png"))
                     (exit-status (call-process "flameshot" nil nil nil "gui"))
                     (exit-status (call-process "xclip" nil `(:file ,image-file) nil "-selection" "clipboard" "-t" "image/png" "-o"))
                     )
                (if caption
                    (insert (format "#+CAPTION: %s label:fig:%s\n" (read-input "Caption: ") (read-input "label: "))))
                (org-insert-link nil (concat "file:" image-file) "")
                (org-display-inline-images))))
        )

    (use-package htmlize)
    ;; Export slide-shows from Org-mode to Reveal.js presentations
    (use-package ox-reveal)
   #+END_SRC
