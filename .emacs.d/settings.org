#+TITLE: Emacs Configuration File

Most of this should be self-explanatory. In places where it isn't,
additional explanations are provided.

* Configuration
** Package Management
   #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
    (package-initialize)

    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

    (eval-when-compile (require 'use-package))

    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
   #+END_SRC

** Core 
*** Server-Mode
    #+BEGIN_SRC emacs-lisp
      (use-package server
       :ensure nil
       :hook (after-init . server-mode))   
    #+END_SRC
*** Editing
    #+BEGIN_SRC emacs-lisp
      (prefer-coding-system 'utf-8-unix)
      (set-locale-environment "en_US.UTF-8")
      (set-default-coding-systems 'utf-8-unix)
      (set-selection-coding-system 'utf-8-unix)
      (set-buffer-file-coding-system 'utf-8-unix)
      (set-clipboard-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (setq buffer-file-coding-system 'utf-8)
      (setq save-buffer-coding-system 'utf-8-unix)

      ;; Vertical Column
      (set-fill-column 80) 

      ;; Default tabs
      (setq-default indent-tabs-mode nil) ;; Use spaces
      (setq-default tab-width 4)
      ; C-specific stuff (move to its own section?)
      (defvaralias 'c-basic-offset 'tab-width)
      (defvaralias 'cperl-indent-level 'tab-width)
    #+END_SRC
*** Look and Feel
    #+BEGIN_SRC emacs-lisp
      ;; Minimalist startup.
      (setq inhibit-startup-screen t)
      (setq inhibit-startup-message t)
      (setq inhibit-startup-echo-area-message t)
      (setq initial-scratch-message nil)

      ;; No clutter.
      (tool-bar-mode 0)
      (menu-bar-mode 0)
      (scroll-bar-mode 0)

      ;; No Auto-save/backups
      ;; (setq backup-directory-alist '(("." . "~/.emacs.d/bak")))
      (setq make-backup-files nil)
      (setq auto-save-default nil)  

      ;; Separate Customize stuff.
      (setq custom-file "~/.emacs.d/custom.el")
      (load custom-file)
      (require 'dracula-theme)

      ;; Unclutter the mode HUD
      (use-package diminish
        :config
        (diminish 'undo-tree-mode)
        (diminish 'auto-revert-mode))

      ;; Reative  Line Numbering
      (use-package linum-relative :diminish
        :config
        (setq linum-relative-backend 'display-line-numbers-mode)
        :hook (after-init . linum-relative-global-mode))
    #+END_SRC

*** IDE Functionality
**** Fuzzy Completion / Helm
     #+BEGIN_SRC emacs-lisp
       (use-package helm :diminish
         :config
           (global-set-key (kbd "M-x") 'helm-M-x)
         :hook (after-init . helm-mode))
     #+END_SRC
**** Git Integration / Magit
     This is largely a work in progress as I figure out which magit
     bindings I am comfortable with.

     #+BEGIN_SRC emacs-lisp
       (use-package magit
           :ensure t
           :config
           (progn
               (evil-leader/set-key "g" 'magit-status)

               (evil-set-initial-state 'magit-mode 'normal)
               (evil-set-initial-state 'magit-status-mode 'normal)
               (evil-set-initial-state 'magit-diff-mode 'normal)
               (evil-set-initial-state 'magit-log-mode 'normal)
               (evil-define-key  'normal magit-mode-map
                   "?"           'magit-dispatch
                   "h"           'magit-section-hide
                   "l"           'magit-section-show
                   "j"           'magit-next-line
                   "k"           'magit-previous-line
                   "c"           'magit-commit
                   "q"           'magit-mode-bury-buffer)
               (evil-define-key  'normal magit-log-mode-map
                   "?"           'magit-dispatch
                   "j"           'magit-next-line
                   "k"           'magit-previous-line
                   "q"           'magit-mode-bury-buffer)
               (evil-define-key  'normal magit-diff-mode-map
                   "?"           'magit-dispatch
                   "h"           'magit-section-hide
                   "l"           'magit-section-show
                   "j"           'magit-next-line
                   "k"           'magit-previous-line
                   "q"           'magit-mode-bury-buffer)
       ))
     #+END_SRC

**** Auto-completion Framework

     This will need to be cleaned up and documented eventually.

     #+BEGIN_SRC emacs-lisp
       ;; Snippets and Templates
       (use-package yasnippet :ensure t :diminish 'yas-minor-mode
         :hook (after-init . yas-global-mode))

       ;; Tab Completion
       (use-package company :ensure t :diminish
         :bind 
         (:map company-active-map
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous)
               ("<tab>" . company-complete-common-or-cycle)
               :map company-search-map
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous))
         :custom
         (company-idle-delay 0)
         (company-echo-delay 0)
         (company-minimum-prefix-length 1)
         :hook (after-init . global-company-mode))

     #+END_SRC

**** Project Management

     #+BEGIN_SRC emacs-lisp
       (use-package projectile :ensure t :diminish)
       (use-package helm-projectile :ensure t :after helm)


       (use-package flycheck :ensure t :diminish
         :init (global-flycheck-mode))
     #+END_SRC
**** Language Server Protocol
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-mode :diminish
         :commands (lsp lsp-deferred)
         :config
         (define-key evil-normal-state-map (kbd "<f2>") 'lsp-rename))

       (use-package lsp-ui
         :commands lsp-ui-mode
         :after lsp-mode)

       (use-package helm-lsp 
         :commands helm-lsp-workspace-symbol
         :after lsp-mode)
       ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

       ;; Company integration
       (use-package company-lsp 
         :commands company-lsp
         :init
           (push 'company-lsp company-backends)
         :config 
           (setq company-lsp-enable-snippet 1)
         :after lsp-mode company)
     #+END_SRC

**** TODO Debugging Support
* Language Support
** Rust
   This section configures the rust language.
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode 
       :hook (rust-mode . lsp)
       :config 
       (setq rust-format-on-save t)
       :after lsp-mode)
   #+END_SRC
** Python

   #+BEGIN_SRC emacs-lisp
     (use-package python-mode
       :after lsp-mode)
   #+END_SRC

* Evil Mode

  Evil mode must be required last to ensure that it properly
  overrides keybindings. All keybindings are thus defined after it
  has been included.

  #+BEGIN_SRC emacs-lisp
    (setq evil-want-C-u-scroll t) ; Use vim's C-u
    (global-evil-leader-mode)
    (use-package evil            :ensure t)
    (use-package evil-leader     :ensure t :after evil)
    (use-package evil-commentary :ensure t)
    (use-package evil-surround   :ensure t
      :config 
      (global-evil-surround-mode 1)
      (evil-mode t)
      (evil-commentary-mode t))
  #+END_SRC

  Bind a =<leader>=-key similar to vim:

  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-leader "<SPC>")
  #+END_SRC

** Dired
   Rebind some keys to make =dired= easier to use with evil.

   #+BEGIN_SRC emacs-lisp
    ;; Same shortcut as vim's NERDTree for now...
    (define-key evil-normal-state-map (kbd "C-b") 'dired)

    (evil-define-key 'normal dired-mode-map "h" 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map "l" 'dired-find-file)
    (evil-define-key 'normal dired-mode-map "o" 'dired-sort-toggle-or-edit)
    (evil-define-key 'normal dired-mode-map "v" 'dired-toggle-marks)
    (evil-define-key 'normal dired-mode-map "m" 'dired-mark)
    (evil-define-key 'normal dired-mode-map "u" 'dired-unmark)
    (evil-define-key 'normal dired-mode-map "U" 'dired-unmark-all-marks)
    (evil-define-key 'normal dired-mode-map "c" 'dired-create-directory)
    (evil-define-key 'normal dired-mode-map "n" 'evil-search-next)
    (evil-define-key 'normal dired-mode-map "N" 'evil-search-previous)
    (evil-define-key 'normal dired-mode-map "q" 'kill-this-buffer)
   #+END_SRC
** Info
   The default bindings are actually decent, but require switching to
   =emacs-state=, which is an additional keystroke. (This is currently broken)
   
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'motion 'info-mode-map
       (kbd "C-o") 'Info-history-back
       (kbd "C-i") 'Info-history-forward)
   #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
     (evil-define-key  'normal org-mode-map
         "gl" 'org-demote-subtree
         "gh" 'org-promote-subtree
         "]]" 'org-next-visible-heading
         "[["'org-previous-visible-heading
         (kbd "RET") 'org-open-at-point)
     ;; (evil-define-key 'visual org-mode-map
     ;;   "d" 'delete-region)

     (evil-leader/set-key (kbd "SPC") 'org-cycle)
     (setq org-return-follows-link t)
     (setq org-hide-leading-stars t)

     ;; This breaks delete/yank line motions.
     ;; "dab" 'org-cut-subtree
     ;; "yab" 'org-copy-subtree
   #+END_SRC
** Helm

   Open files and buffers with =;=.
   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd ";") 'helm-mini)
     (evil-define-key 'normal info-mode-map ";" 'helm-mini)
   #+END_SRC

   =Ctrl+P= is a very common "go to anything..." shortcut in modern
   editors. Let's have the same. There are a few additional
   considerations for cross-platform support here: The tool =fd= is
   not always available. This still needs some work.

   #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-p") 'helm-projectile-find-file)
   #+END_SRC

** Navigation

   =Ctrl-S= is almost universal for save file...

   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-s") 'save-buffer)
   #+END_SRC
   
   Define basic window navigation hotkeys:

   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
     (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
     (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)
     (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)

     ; Motion mode shouldd behave like normal mode.
     (define-key evil-motion-state-map (kbd "M-h") 'evil-window-left)
     (define-key evil-motion-state-map (kbd "M-j") 'evil-window-down)
     (define-key evil-motion-state-map (kbd "M-k") 'evil-window-up)
     (define-key evil-motion-state-map (kbd "M-l") 'evil-window-right)

     (evil-leader/set-key "q" 'kill-buffer-and-window)
     (evil-leader/set-key "e" 'pp-eval-last-sexp)

     ; Org globals (<leader>-o)
     (evil-leader/set-key "oa" 'org-agenda)
     (evil-leader/set-key "oo" 'org-capture)
     (evil-leader/set-key "ol" 'org-store-link)
     (evil-leader/set-key "ob" 'org-switchb)

     ; Shortcut to clean up buffer list (vim equivalent of :bufdo bd<CR>)
     (defun a/kill-all-buffers ()
       (interactive)
       (mapcar 'kill-buffer (buffer-list))
       (delete-other-windows))

     (evil-leader/set-key "Q" 'a/kill-all-buffers)

   #+END_SRC
